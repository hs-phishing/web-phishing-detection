# -*- coding: utf-8 -*-
"""url_based_feature.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ug54LEJRt_rAILTXOxwlSfQ21LHC0Vci
"""

#pip install python-whois

import re
from urllib.parse import urlparse
import whois
import socket
from concurrent.futures import ThreadPoolExecutor, as_completed

# URLURL_Length : 75 초과 피싱 / 54 이상 75 이하 의심 / 54 미만 정상
def check_url_length(url):
    if len(url) < 54 :
        return -1
    elif len(url) >= 54 and len(url) <= 75 :
        return 0
    else :
        return 1

def scan_port(hostname, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(1)  # 타임아웃 설정
            result = sock.connect_ex((hostname, port))
            if result == 0:
                return port, 1  # 포트가 열려 있으면 1 반환
    except (socket.gaierror, socket.timeout, socket.error):
        return port, 0  # 오류 발생 시 0 반환
    return port, -1  # 포트가 닫혀 있거나 오류 외의 경우 -1 반환

def scan_non_standard_ports(url):
    non_standard_ports = [21, 22, 445, 1433, 1521, 3306, 3389]
    hostname = url.split('//')[-1].split('/')[0]

    open_ports = []

    with ThreadPoolExecutor(max_workers=len(non_standard_ports)) as executor:
        futures = {executor.submit(scan_port, hostname, port): port for port in non_standard_ports}

        for future in as_completed(futures):
            port, status = future.result()
            if status == 1:
                open_ports.append(port)
            elif status == 0:
                return 0 # 포트 스캔 시 오류 발생하면 피싱 의

    # 비표준 포트가 열려 있으면 피싱 가능성 있음
    if open_ports:
        return 1
    # 비표준 포트가 모두 닫혀 있으면 정상
    return -1

# having_At_Symbol
def check_at_symbol(url):
    if "@" in url:
        return 1
    return -1

# double_slash_redirecting
def check_double_slash_redirecting(url):
    if url.startswith("http://") and url.find("//", 7) > 7:
        return 1
    if url.startswith("https://") and url.find("//", 8) > 8:
        return 1
    return -1

# Prefix_Suffix
def check_prefix_suffix(url):
    domain = urlparse(url).netloc
    if '-' in domain:
        return 1
    return -1

# Abnormal_URL
def check_abnormal_url(url):
    domain = urlparse(url).netloc

    try:
        # WHOIS 정보 조회
        w = whois.whois(domain)

        if not w.domain_name or not w.creation_date:
            return 1
        else:
            return -1
    except Exception as e:
        # WHOIS 조회 실패 시 피싱으로 간주
        return 1

# 테스트
# def test_features():
#     test_urls = [
#         "http://www.crestonwood.com/router.php",  # 정상 URL
#         "https://support-appleld.com.secureupdate.duilawyeryork.com/ap/89e6a3b4b063b8d/?cmd=_update&dispatch=89e6a3b4b063b8d1b&locale=_",  # 긴 URL
#         "http://mcsquareintl.com:32000/mail/expiredpass.html", # 포트 스캔
#         "https://www.centromusicalpaternense.es:443/wp-includes/css", # 포트스캔2
#         "https://monovative-my.sharepoint.com:443/:o:/g/personal/user_monovative_onmicrosoft_com/EmCzKJnKZgxDtejtstZ67qQBlkNaRN4Da620KjAjE91eWQ?e=5:wesEg8&amp;at=9", # 포트 스캔3
#         "http://www.inbioma.pe/rechnung-376440790464490488&amp;cgi3-viewkontakt-376440790464490488-007acctpagetype-376440790464490488=4674720-&amp;info@s-und-s-shop.de.html",  # '@' 기호 포함
#         "http://maanprofessionals.nl//index.html",  # double slash 포함
#         "http://appleid.apple.com-app.es/",  # '-' 포함
#         "http://www.history.com/topics/american-civil-war/gettysburg-address",  # 정상 도메인
#         "http://izvilagkft.hu/wp-content/languages/.../redirect/com.htm",  # 비정상 도메인
#     ]

#     for url in test_urls:
#         print(f"테스트 URL: {url}")

#         # 결과 저장
#         phishing_reasons = []

#         # 각 피처 검사
#         if check_url_length(url) == 1:
#             phishing_reasons.append("URL Length")

#         if check_url_length(url) == 0:
#             phishing_reasons.append("URL Length의심")

#         if scan_non_standard_ports(url) == 1:
#             phishing_reasons.append("비표준 포트")

#         if scan_non_standard_ports(url) == 0:
#             phishing_reasons.append("port 의심")

#         if check_at_symbol(url) == 1:
#             phishing_reasons.append("'@' Symbol")

#         if check_double_slash_redirecting(url) == 1:
#             phishing_reasons.append("Double Slash Redirecting")

#         if check_prefix_suffix(url) == 1:
#             phishing_reasons.append("Prefix-Suffix")

#         if check_abnormal_url(url) == 1:
#             phishing_reasons.append("Abnormal URL")

#         # 결과 출력
#         if phishing_reasons:
#             print("  Result: 피싱")
#             print("  Reasons: " + ", ".join(phishing_reasons))
#         else:
#             print("  Result: 정상")

#         print("-" * 50)


# if __name__ == "__main__":
#     test_features()